/*
 * This file is generated by jOOQ.
 */
package jobabroad.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jobabroad.jooq.Indexes;
import jobabroad.jooq.Jobabroad;
import jobabroad.jooq.Keys;
import jobabroad.jooq.tables.records.AppliedJobsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppliedJobs extends TableImpl<AppliedJobsRecord> {

    private static final long serialVersionUID = 882986753;

    /**
     * The reference instance of <code>jobabroad.applied_jobs</code>
     */
    public static final AppliedJobs APPLIED_JOBS = new AppliedJobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppliedJobsRecord> getRecordType() {
        return AppliedJobsRecord.class;
    }

    /**
     * The column <code>jobabroad.applied_jobs.id_user</code>.
     */
    public final TableField<AppliedJobsRecord, Integer> ID_USER = createField("id_user", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jobabroad.applied_jobs.id_job</code>.
     */
    public final TableField<AppliedJobsRecord, Integer> ID_JOB = createField("id_job", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jobabroad.applied_jobs.applied</code>.
     */
    public final TableField<AppliedJobsRecord, Integer> APPLIED = createField("applied", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>jobabroad.applied_jobs</code> table reference
     */
    public AppliedJobs() {
        this(DSL.name("applied_jobs"), null);
    }

    /**
     * Create an aliased <code>jobabroad.applied_jobs</code> table reference
     */
    public AppliedJobs(String alias) {
        this(DSL.name(alias), APPLIED_JOBS);
    }

    /**
     * Create an aliased <code>jobabroad.applied_jobs</code> table reference
     */
    public AppliedJobs(Name alias) {
        this(alias, APPLIED_JOBS);
    }

    private AppliedJobs(Name alias, Table<AppliedJobsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppliedJobs(Name alias, Table<AppliedJobsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jobabroad.JOBABROAD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APPLIED_JOBS_ID_JOB, Indexes.APPLIED_JOBS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AppliedJobsRecord> getPrimaryKey() {
        return Keys.KEY_APPLIED_JOBS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AppliedJobsRecord>> getKeys() {
        return Arrays.<UniqueKey<AppliedJobsRecord>>asList(Keys.KEY_APPLIED_JOBS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AppliedJobsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AppliedJobsRecord, ?>>asList(Keys.APPLIED_JOBS_IBFK_1, Keys.APPLIED_JOBS_IBFK_2);
    }

    public User user() {
        return new User(this, Keys.APPLIED_JOBS_IBFK_1);
    }

    public Jobs jobs() {
        return new Jobs(this, Keys.APPLIED_JOBS_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppliedJobs as(String alias) {
        return new AppliedJobs(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AppliedJobs as(Name alias) {
        return new AppliedJobs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppliedJobs rename(String name) {
        return new AppliedJobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppliedJobs rename(Name name) {
        return new AppliedJobs(name, null);
    }
}
