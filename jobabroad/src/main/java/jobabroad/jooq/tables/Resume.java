/*
 * This file is generated by jOOQ.
 */
package jobabroad.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jobabroad.jooq.Indexes;
import jobabroad.jooq.Jobabroad;
import jobabroad.jooq.Keys;
import jobabroad.jooq.tables.records.ResumeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Resume extends TableImpl<ResumeRecord> {

    private static final long serialVersionUID = 1319599202;

    /**
     * The reference instance of <code>jobabroad.resume</code>
     */
    public static final Resume RESUME = new Resume();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResumeRecord> getRecordType() {
        return ResumeRecord.class;
    }

    /**
     * The column <code>jobabroad.resume.id_user</code>.
     */
    public final TableField<ResumeRecord, Integer> ID_USER = createField("id_user", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jobabroad.resume.observations</code>.
     */
    public final TableField<ResumeRecord, String> OBSERVATIONS = createField("observations", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>jobabroad.resume</code> table reference
     */
    public Resume() {
        this(DSL.name("resume"), null);
    }

    /**
     * Create an aliased <code>jobabroad.resume</code> table reference
     */
    public Resume(String alias) {
        this(DSL.name(alias), RESUME);
    }

    /**
     * Create an aliased <code>jobabroad.resume</code> table reference
     */
    public Resume(Name alias) {
        this(alias, RESUME);
    }

    private Resume(Name alias, Table<ResumeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Resume(Name alias, Table<ResumeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jobabroad.JOBABROAD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RESUME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ResumeRecord> getPrimaryKey() {
        return Keys.KEY_RESUME_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ResumeRecord>> getKeys() {
        return Arrays.<UniqueKey<ResumeRecord>>asList(Keys.KEY_RESUME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ResumeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ResumeRecord, ?>>asList(Keys.RESUME_IBFK_1);
    }

    public User user() {
        return new User(this, Keys.RESUME_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Resume as(String alias) {
        return new Resume(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Resume as(Name alias) {
        return new Resume(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Resume rename(String name) {
        return new Resume(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Resume rename(Name name) {
        return new Resume(name, null);
    }
}
