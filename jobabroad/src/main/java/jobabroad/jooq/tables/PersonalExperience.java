/*
 * This file is generated by jOOQ.
 */
package jobabroad.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jobabroad.jooq.Indexes;
import jobabroad.jooq.Jobabroad;
import jobabroad.jooq.Keys;
import jobabroad.jooq.tables.records.PersonalExperienceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonalExperience extends TableImpl<PersonalExperienceRecord> {

    private static final long serialVersionUID = 176939142;

    /**
     * The reference instance of <code>jobabroad.personal_experience</code>
     */
    public static final PersonalExperience PERSONAL_EXPERIENCE = new PersonalExperience();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonalExperienceRecord> getRecordType() {
        return PersonalExperienceRecord.class;
    }

    /**
     * The column <code>jobabroad.personal_experience.id</code>.
     */
    public final TableField<PersonalExperienceRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jobabroad.personal_experience.id_user</code>.
     */
    public final TableField<PersonalExperienceRecord, Integer> ID_USER = createField("id_user", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jobabroad.personal_experience.description_exp</code>.
     */
    public final TableField<PersonalExperienceRecord, String> DESCRIPTION_EXP = createField("description_exp", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jobabroad.personal_experience.years_exp</code>.
     */
    public final TableField<PersonalExperienceRecord, Integer> YEARS_EXP = createField("years_exp", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jobabroad.personal_experience.type_exp</code>.
     */
    public final TableField<PersonalExperienceRecord, Integer> TYPE_EXP = createField("type_exp", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>jobabroad.personal_experience</code> table reference
     */
    public PersonalExperience() {
        this(DSL.name("personal_experience"), null);
    }

    /**
     * Create an aliased <code>jobabroad.personal_experience</code> table reference
     */
    public PersonalExperience(String alias) {
        this(DSL.name(alias), PERSONAL_EXPERIENCE);
    }

    /**
     * Create an aliased <code>jobabroad.personal_experience</code> table reference
     */
    public PersonalExperience(Name alias) {
        this(alias, PERSONAL_EXPERIENCE);
    }

    private PersonalExperience(Name alias, Table<PersonalExperienceRecord> aliased) {
        this(alias, aliased, null);
    }

    private PersonalExperience(Name alias, Table<PersonalExperienceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jobabroad.JOBABROAD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERSONAL_EXPERIENCE_ID_USER, Indexes.PERSONAL_EXPERIENCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PersonalExperienceRecord> getPrimaryKey() {
        return Keys.KEY_PERSONAL_EXPERIENCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PersonalExperienceRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonalExperienceRecord>>asList(Keys.KEY_PERSONAL_EXPERIENCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PersonalExperienceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PersonalExperienceRecord, ?>>asList(Keys.PERSONAL_EXPERIENCE_IBFK_1);
    }

    public User user() {
        return new User(this, Keys.PERSONAL_EXPERIENCE_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PersonalExperience as(String alias) {
        return new PersonalExperience(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PersonalExperience as(Name alias) {
        return new PersonalExperience(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonalExperience rename(String name) {
        return new PersonalExperience(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonalExperience rename(Name name) {
        return new PersonalExperience(name, null);
    }
}
